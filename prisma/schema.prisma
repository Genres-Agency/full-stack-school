generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model User {
  id        String    @id @default(cuid())
  name      String?
  username  String    @unique
  email     String    @unique
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]

  @@map("users") // Optional: maps table name in database
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  USER
}

model Admission {
  id               Int       @id @default(autoincrement())
  studentName      String
  contactNumber    String
  bloodGroup       String
  email            String
  nationality      String
  gender           String
  image            String?
  birthCertificate String
  religion         String
  dateOfBirth      DateTime
  presentAddress   String
  fatherName       String
  fatherPhone      String
  fatherOccupation String?
  motherName       String
  motherPhone      String?
  motherOccupation String
  sscEquivalent    String?
  sscGroup         String?
  sscBoard         String?
  sscBoardRoll     String?
  sscGPA           String?
  sscPassingYear   String?
  sscInstituteName String?
  hscEquivalent    String?
  hscGroup         String?
  hscBoard         String?
  hscBoardRoll     String?
  hscGPA           String?
  hscPassingYear   String?
  hscInstituteName String?
  createdAt        DateTime  @default(now())
  students         Student[]
}

model Student {
  id         String      @id
  username   String      @unique
  name       String
  surname    String
  email      String?     @unique
  phone      String?     @unique
  address    String
  img        String?
  bloodType  String
  sex        UserSex
  createdAt  DateTime    @default(now())
  parentNId  BigInt?
  parentName String?
  classId    Int
  class      Class       @relation(fields: [classId], references: [id])
  gradeId    Int
  grade      Grade       @relation(fields: [gradeId], references: [id])
  results    Result[]
  birthday   DateTime
  payments   Payment[]
  admission  Admission[]
}

model Teacher {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  subjects    Subject[]
  lessons     Lesson[]
  classes     Class[]
  joiningDate DateTime?
  assignments Assignment[]
}

model Parent {
  id        String   @id
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String   @unique
  address   String
  createdAt DateTime @default(now())
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  students Student[]
}

model Class {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  fees         Int
  capacity     Int
  assignments  Assignment[]
  supervisorId String?
  supervisor   Teacher?      @relation(fields: [supervisorId], references: [id])
  lessons      Lesson[]
  students     Student[]
  events       Event[]
  examRoutines ExamRoutine[]
  attendances  Attendance[]
}

model Subject {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  teachers     Teacher[]
  lessons      Lesson[]
  results      Result[]
  assignments  Assignment[]
  examRoutines ExamRoutine[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime
  subjectId Int
  subject   Subject  @relation(fields: [subjectId], references: [id])
  classId   Int
  class     Class    @relation(fields: [classId], references: [id])
  teacherId String
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
}

model ExamRoutine {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  classId   Int
  classes   Class    @relation(fields: [classId], references: [id])
  subjectId Int
  subject   Subject  @relation(fields: [subjectId], references: [id])
}

model Assignment {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  startDate   DateTime  @default(now())
  dueDate     DateTime
  subject     Subject[]
  class       Class[]
  teacher     Teacher[]
}

model Result {
  id        String   @id @default(uuid())
  studentId String
  subjectId Int
  marks     Int?
  grade     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [username], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  img         String?
}

model Attendance {
  id      Int      @id @default(autoincrement())
  classId Int // Field for the class ID
  classes Class    @relation(fields: [classId], references: [id])
  date    DateTime // Field for the date of attendance
  day     Day // Enum for the day of the week
  present Int // Field to indicate if the student is present 
  total   Int
}

model Finance {
  id          Int      @id @default(autoincrement())
  type        String // "income" or "expense"
  amount      Float
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id        String        @id @default(cuid())
  amount    Float
  status    PaymentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  studentId String
  student   Student       @relation(fields: [studentId], references: [username], onDelete: Cascade)
}

enum PaymentStatus {
  NotPaid
  Paid
  Due
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
